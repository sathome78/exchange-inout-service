package com.exrates.inout.service.ethereum.ethTokensWrappers;

import org.web3j.abi.EventEncoder;
import org.web3j.abi.FunctionEncoder;
import org.web3j.abi.TypeReference;
import org.web3j.abi.datatypes.*;
import org.web3j.abi.datatypes.generated.Uint256;
import org.web3j.crypto.Credentials;
import org.web3j.protocol.Web3j;
import org.web3j.protocol.core.DefaultBlockParameter;
import org.web3j.protocol.core.RemoteCall;
import org.web3j.protocol.core.methods.request.EthFilter;
import org.web3j.protocol.core.methods.response.Log;
import org.web3j.protocol.core.methods.response.TransactionReceipt;
import org.web3j.tx.Contract;
import org.web3j.tx.TransactionManager;
import rx.Observable;
import rx.functions.Func1;

import java.math.BigInteger;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.List;

/**
 * <p>Auto generated code.
 * <p><strong>Do not modify!</strong>
 * <p>Please use the <a href="https://docs.web3j.io/command_line.html">web3j command line tools</a>,
 * or the org.web3j.codegen.SolidityFunctionWrapperGenerator in the
 * <a href="https://github.com/web3j/web3j/tree/master/codegen">codegen module</a> to update.
 *
 * <p>Generated with web3j version 3.4.0.
 */
public class GEX extends Contract implements ethTokenERC20{
    private static final String BINARY = "\n"
            + "\n";

    public static final String FUNC_LOADFUND = "loadFund";

    public static final String FUNC_BONUSALLOCATION = "bonusAllocation";

    public static final String FUNC_NAME = "name";

    public static final String FUNC_RESERVEDALLOCATION = "reservedAllocation";

    public static final String FUNC_APPROVE = "approve";

    public static final String FUNC_ACTIVATE = "activate";

    public static final String FUNC_CHANGEADMINADDRESS = "changeAdminAddress";

    public static final String FUNC_TOTALSUPPLY = "totalSupply";

    public static final String FUNC_TEAMADDRESS = "teamAddress";

    public static final String FUNC_ISTRANSFERABLE = "isTransferable";

    public static final String FUNC_CHANGEFOUNDERADDRESS = "changeFounderAddress";

    public static final String FUNC_TRANSFERFROM = "transferFrom";

    public static final String FUNC_SETICOPRICE = "setICOPrice";

    public static final String FUNC_DECIMALS = "decimals";

    public static final String FUNC_SALESALLOCATION = "salesAllocation";

    public static final String FUNC_WHITELIST = "whiteList";

    public static final String FUNC_GETCURRENTSTATE = "getCurrentState";

    public static final String FUNC_ENABLETOKENTRANSFER = "enableTokenTransfer";

    public static final String FUNC_CHANGETEAMADDRESS = "changeTeamAddress";

    public static final String FUNC_ICO1STPRICE = "ico1stPrice";

    public static final String FUNC_TOTALLOADEDREFUND = "totalLoadedRefund";

    public static final String FUNC_FOUNDERADDRESS = "founderAddress";

    public static final String FUNC_ENDICO = "endICO";

    public static final String FUNC_ALLOCATERESERVEDTOKENS = "allocateReservedTokens";

    public static final String FUNC_STARTPRIVATESALES = "startPrivateSales";

    public static final String FUNC_REFUND = "refund";

    public static final String FUNC_ALLOCATETOKENSFORTEAM = "allocateTokensForTeam";

    public static final String FUNC_ICOSTANDARDPRICE = "icoStandardPrice";

    public static final String FUNC_MININVESTEDAMOUNT = "minInvestedAmount";

    public static final String FUNC_ALLOCATEREMAININGTOKENS = "allocateRemainingTokens";

    public static final String FUNC_TEAMALLOCATION = "teamAllocation";

    public static final String FUNC_WALLETADDRESS = "walletAddress";

    public static final String FUNC_BALANCEOF = "balanceOf";

    public static final String FUNC_REVOKETOKENS = "revokeTokens";

    public static final String FUNC_TOTALINVESTEDAMOUNTOF = "totalInvestedAmountOf";

    public static final String FUNC_SETPRIVATESALEPRICE = "setPrivateSalePrice";

    public static final String FUNC_SETPRESALEPRICE = "setPreSalePrice";

    public static final String FUNC_MODIFYPRIVATELIST = "modifyPrivateList";

    public static final String FUNC_ICOENDTIME = "icoEndTime";

    public static final String FUNC_STARTICO = "startICO";

    public static final String FUNC_ISSOFTCAPREACHED = "isSoftCapReached";

    public static final String FUNC_FOUNDERALLOCATION = "founderAllocation";

    public static final String FUNC_OWNER = "owner";

    public static final String FUNC_STARTPRESALES = "startPreSales";

    public static final String FUNC_PRIVATELIST = "privateList";

    public static final String FUNC_SYMBOL = "symbol";

    public static final String FUNC_TOTALRESERVEDANDBONUSTOKENALLOCATION = "totalReservedAndBonusTokenAllocation";

    public static final String FUNC_CHANGEWALLET = "changeWallet";

    public static final String FUNC_CHANGEPORTALADDRESS = "changePortalAddress";

    public static final String FUNC_PORTALADDRESS = "portalAddress";

    public static final String FUNC_CHANGEOWNER = "changeOwner";

    public static final String FUNC_ICOSTARTTIME = "icoStartTime";

    public static final String FUNC_TRANSFER = "transfer";

    public static final String FUNC_TOTALREMAININGTOKENSFORSALES = "totalRemainingTokensForSales";

    public static final String FUNC_ICO2NDPRICE = "ico2ndPrice";

    public static final String FUNC_MODIFYWHITELIST = "modifyWhiteList";

    public static final String FUNC_ISSELLING = "isSelling";

    public static final String FUNC_TOTALREFUNDEDAMOUNT = "totalRefundedAmount";

    public static final String FUNC_ALLOCATETOKENSFORFOUNDER = "allocateTokensForFounder";

    public static final String FUNC_FOUNDERALLOCATEDTIME = "founderAllocatedTime";

    public static final String FUNC_MININVESTEDCAP = "minInvestedCap";

    public static final String FUNC_ALLOWANCE = "allowance";

    public static final String FUNC_ENDPRESALES = "endPreSales";

    public static final String FUNC_PRESALEPRICE = "preSalePrice";

    public static final String FUNC_TEAMALLOCATEDTIME = "teamAllocatedTime";

    public static final String FUNC_PRIVATESALEPRICE = "privateSalePrice";

    public static final String FUNC_INACTIVE = "inActive";

    public static final String FUNC_ADMINADDRESS = "adminAddress";

    public static final String FUNC_DEACTIVATE = "deActivate";

    public static final Event APPROVAL_EVENT = new Event("Approval",
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}, new TypeReference<Address>() {}),
            Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
    ;

    public static final Event TRANSFER_EVENT = new Event("Transfer",
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}, new TypeReference<Address>() {}),
            Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
    ;

    public static final Event MODIFYWHITELIST_EVENT = new Event("ModifyWhiteList",
            Arrays.<TypeReference<?>>asList(),
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}, new TypeReference<Bool>() {}));
    ;

    public static final Event MODIFYPRIVATELIST_EVENT = new Event("ModifyPrivateList",
            Arrays.<TypeReference<?>>asList(),
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}, new TypeReference<Bool>() {}));
    ;

    public static final Event STARTPRIVATESALES_EVENT = new Event("StartPrivateSales",
            Arrays.<TypeReference<?>>asList(),
            Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
    ;

    public static final Event STARTPRESALES_EVENT = new Event("StartPresales",
            Arrays.<TypeReference<?>>asList(),
            Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
    ;

    public static final Event ENDPRESALES_EVENT = new Event("EndPresales",
            Arrays.<TypeReference<?>>asList(),
            Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
    ;

    public static final Event STARTICO_EVENT = new Event("StartICO",
            Arrays.<TypeReference<?>>asList(),
            Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
    ;

    public static final Event ENDICO_EVENT = new Event("EndICO",
            Arrays.<TypeReference<?>>asList(),
            Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
    ;

    public static final Event SETPRIVATESALEPRICE_EVENT = new Event("SetPrivateSalePrice",
            Arrays.<TypeReference<?>>asList(),
            Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
    ;

    public static final Event SETPRESALEPRICE_EVENT = new Event("SetPreSalePrice",
            Arrays.<TypeReference<?>>asList(),
            Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
    ;

    public static final Event SETICOPRICE_EVENT = new Event("SetICOPrice",
            Arrays.<TypeReference<?>>asList(),
            Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
    ;

    public static final Event ISSUETOKENS_EVENT = new Event("IssueTokens",
            Arrays.<TypeReference<?>>asList(),
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}));
    ;

    public static final Event REVOKETOKENS_EVENT = new Event("RevokeTokens",
            Arrays.<TypeReference<?>>asList(),
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}));
    ;

    public static final Event ALLOCATETOKENSFORFOUNDER_EVENT = new Event("AllocateTokensForFounder",
            Arrays.<TypeReference<?>>asList(),
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}));
    ;

    public static final Event ALLOCATETOKENSFORTEAM_EVENT = new Event("AllocateTokensForTeam",
            Arrays.<TypeReference<?>>asList(),
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}));
    ;

    public static final Event ALLOCATERESERVEDTOKENS_EVENT = new Event("AllocateReservedTokens",
            Arrays.<TypeReference<?>>asList(),
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}, new TypeReference<Uint256>() {}));
    ;

    public static final Event REFUND_EVENT = new Event("Refund",
            Arrays.<TypeReference<?>>asList(),
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}));
    ;

    protected GEX(String contractAddress, Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    protected GEX(String contractAddress, Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    public RemoteCall<TransactionReceipt> loadFund(BigInteger weiValue) {
        final Function function = new Function(
                FUNC_LOADFUND,
                Arrays.<Type>asList(),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function, weiValue);
    }

    public RemoteCall<BigInteger> bonusAllocation() {
        final Function function = new Function(FUNC_BONUSALLOCATION,
                Arrays.<Type>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteCall<String> name() {
        final Function function = new Function(FUNC_NAME,
                Arrays.<Type>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteCall<BigInteger> reservedAllocation() {
        final Function function = new Function(FUNC_RESERVEDALLOCATION,
                Arrays.<Type>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteCall<TransactionReceipt> approve(String _spender, BigInteger _value) {
        final Function function = new Function(
                FUNC_APPROVE,
                Arrays.<Type>asList(new Address(_spender),
                        new Uint256(_value)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<TransactionReceipt> activate() {
        final Function function = new Function(
                FUNC_ACTIVATE,
                Arrays.<Type>asList(),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<TransactionReceipt> changeAdminAddress(String _newAddress) {
        final Function function = new Function(
                FUNC_CHANGEADMINADDRESS,
                Arrays.<Type>asList(new Address(_newAddress)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<BigInteger> totalSupply() {
        final Function function = new Function(FUNC_TOTALSUPPLY,
                Arrays.<Type>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteCall<String> teamAddress() {
        final Function function = new Function(FUNC_TEAMADDRESS,
                Arrays.<Type>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteCall<Boolean> isTransferable() {
        final Function function = new Function(FUNC_ISTRANSFERABLE,
                Arrays.<Type>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        return executeRemoteCallSingleValueReturn(function, Boolean.class);
    }

    public RemoteCall<TransactionReceipt> changeFounderAddress(String _newAddress) {
        final Function function = new Function(
                FUNC_CHANGEFOUNDERADDRESS,
                Arrays.<Type>asList(new Address(_newAddress)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<TransactionReceipt> transferFrom(String _from, String _to, BigInteger _value) {
        final Function function = new Function(
                FUNC_TRANSFERFROM,
                Arrays.<Type>asList(new Address(_from),
                        new Address(_to),
                        new Uint256(_value)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<TransactionReceipt> setICOPrice(BigInteger _tokenPerEther) {
        final Function function = new Function(
                FUNC_SETICOPRICE,
                Arrays.<Type>asList(new Uint256(_tokenPerEther)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<BigInteger> decimals() {
        final Function function = new Function(FUNC_DECIMALS,
                Arrays.<Type>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteCall<BigInteger> salesAllocation() {
        final Function function = new Function(FUNC_SALESALLOCATION,
                Arrays.<Type>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteCall<Boolean> whiteList(String param0) {
        final Function function = new Function(FUNC_WHITELIST,
                Arrays.<Type>asList(new Address(param0)),
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        return executeRemoteCallSingleValueReturn(function, Boolean.class);
    }

    public RemoteCall<BigInteger> getCurrentState() {
        final Function function = new Function(FUNC_GETCURRENTSTATE,
                Arrays.<Type>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteCall<TransactionReceipt> enableTokenTransfer() {
        final Function function = new Function(
                FUNC_ENABLETOKENTRANSFER,
                Arrays.<Type>asList(),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<TransactionReceipt> changeTeamAddress(String _newAddress) {
        final Function function = new Function(
                FUNC_CHANGETEAMADDRESS,
                Arrays.<Type>asList(new Address(_newAddress)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<BigInteger> ico1stPrice() {
        final Function function = new Function(FUNC_ICO1STPRICE,
                Arrays.<Type>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteCall<BigInteger> totalLoadedRefund() {
        final Function function = new Function(FUNC_TOTALLOADEDREFUND,
                Arrays.<Type>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteCall<String> founderAddress() {
        final Function function = new Function(FUNC_FOUNDERADDRESS,
                Arrays.<Type>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteCall<TransactionReceipt> endICO() {
        final Function function = new Function(
                FUNC_ENDICO,
                Arrays.<Type>asList(),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<TransactionReceipt> allocateReservedTokens(String _addr, BigInteger _amount) {
        final Function function = new Function(
                FUNC_ALLOCATERESERVEDTOKENS,
                Arrays.<Type>asList(new Address(_addr),
                        new Uint256(_amount)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<TransactionReceipt> startPrivateSales() {
        final Function function = new Function(
                FUNC_STARTPRIVATESALES,
                Arrays.<Type>asList(),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<TransactionReceipt> refund() {
        final Function function = new Function(
                FUNC_REFUND,
                Arrays.<Type>asList(),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<TransactionReceipt> allocateTokensForTeam() {
        final Function function = new Function(
                FUNC_ALLOCATETOKENSFORTEAM,
                Arrays.<Type>asList(),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<BigInteger> icoStandardPrice() {
        final Function function = new Function(FUNC_ICOSTANDARDPRICE,
                Arrays.<Type>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteCall<BigInteger> minInvestedAmount() {
        final Function function = new Function(FUNC_MININVESTEDAMOUNT,
                Arrays.<Type>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteCall<TransactionReceipt> allocateRemainingTokens(String _addr) {
        final Function function = new Function(
                FUNC_ALLOCATEREMAININGTOKENS,
                Arrays.<Type>asList(new Address(_addr)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<BigInteger> teamAllocation() {
        final Function function = new Function(FUNC_TEAMALLOCATION,
                Arrays.<Type>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteCall<String> walletAddress() {
        final Function function = new Function(FUNC_WALLETADDRESS,
                Arrays.<Type>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteCall<BigInteger> balanceOf(String _owner) {
        final Function function = new Function(FUNC_BALANCEOF,
                Arrays.<Type>asList(new Address(_owner)),
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteCall<TransactionReceipt> revokeTokens(String _noneKycAddr, BigInteger _transactionFee) {
        final Function function = new Function(
                FUNC_REVOKETOKENS,
                Arrays.<Type>asList(new Address(_noneKycAddr),
                        new Uint256(_transactionFee)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<BigInteger> totalInvestedAmountOf(String param0) {
        final Function function = new Function(FUNC_TOTALINVESTEDAMOUNTOF,
                Arrays.<Type>asList(new Address(param0)),
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteCall<TransactionReceipt> setPrivateSalePrice(BigInteger _tokenPerEther) {
        final Function function = new Function(
                FUNC_SETPRIVATESALEPRICE,
                Arrays.<Type>asList(new Uint256(_tokenPerEther)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<TransactionReceipt> setPreSalePrice(BigInteger _tokenPerEther) {
        final Function function = new Function(
                FUNC_SETPRESALEPRICE,
                Arrays.<Type>asList(new Uint256(_tokenPerEther)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<TransactionReceipt> modifyPrivateList(List<String> _investorAddrs, Boolean _isPrivateListed) {
        final Function function = new Function(
                FUNC_MODIFYPRIVATELIST,
                Arrays.<Type>asList(new DynamicArray<Address>(
                                org.web3j.abi.Utils.typeMap(_investorAddrs, Address.class)),
                        new Bool(_isPrivateListed)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<BigInteger> icoEndTime() {
        final Function function = new Function(FUNC_ICOENDTIME,
                Arrays.<Type>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteCall<TransactionReceipt> startICO() {
        final Function function = new Function(
                FUNC_STARTICO,
                Arrays.<Type>asList(),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<Boolean> isSoftCapReached() {
        final Function function = new Function(FUNC_ISSOFTCAPREACHED,
                Arrays.<Type>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        return executeRemoteCallSingleValueReturn(function, Boolean.class);
    }

    public RemoteCall<BigInteger> founderAllocation() {
        final Function function = new Function(FUNC_FOUNDERALLOCATION,
                Arrays.<Type>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteCall<String> owner() {
        final Function function = new Function(FUNC_OWNER,
                Arrays.<Type>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteCall<TransactionReceipt> startPreSales() {
        final Function function = new Function(
                FUNC_STARTPRESALES,
                Arrays.<Type>asList(),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<Boolean> privateList(String param0) {
        final Function function = new Function(FUNC_PRIVATELIST,
                Arrays.<Type>asList(new Address(param0)),
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        return executeRemoteCallSingleValueReturn(function, Boolean.class);
    }

    public RemoteCall<String> symbol() {
        final Function function = new Function(FUNC_SYMBOL,
                Arrays.<Type>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteCall<BigInteger> totalReservedAndBonusTokenAllocation() {
        final Function function = new Function(FUNC_TOTALRESERVEDANDBONUSTOKENALLOCATION,
                Arrays.<Type>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteCall<TransactionReceipt> changeWallet(String _newAddress) {
        final Function function = new Function(
                FUNC_CHANGEWALLET,
                Arrays.<Type>asList(new Address(_newAddress)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<TransactionReceipt> changePortalAddress(String _newAddress) {
        final Function function = new Function(
                FUNC_CHANGEPORTALADDRESS,
                Arrays.<Type>asList(new Address(_newAddress)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<String> portalAddress() {
        final Function function = new Function(FUNC_PORTALADDRESS,
                Arrays.<Type>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteCall<TransactionReceipt> changeOwner(String _newOwnerAddr) {
        final Function function = new Function(
                FUNC_CHANGEOWNER,
                Arrays.<Type>asList(new Address(_newOwnerAddr)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<BigInteger> icoStartTime() {
        final Function function = new Function(FUNC_ICOSTARTTIME,
                Arrays.<Type>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteCall<TransactionReceipt> transfer(String _to, BigInteger _value) {
        final Function function = new Function(
                FUNC_TRANSFER,
                Arrays.<Type>asList(new Address(_to),
                        new Uint256(_value)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<BigInteger> totalRemainingTokensForSales() {
        final Function function = new Function(FUNC_TOTALREMAININGTOKENSFORSALES,
                Arrays.<Type>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteCall<BigInteger> ico2ndPrice() {
        final Function function = new Function(FUNC_ICO2NDPRICE,
                Arrays.<Type>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteCall<TransactionReceipt> modifyWhiteList(List<String> _investorAddrs, Boolean _isWhiteListed) {
        final Function function = new Function(
                FUNC_MODIFYWHITELIST,
                Arrays.<Type>asList(new DynamicArray<Address>(
                                org.web3j.abi.Utils.typeMap(_investorAddrs, Address.class)),
                        new Bool(_isWhiteListed)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<Boolean> isSelling() {
        final Function function = new Function(FUNC_ISSELLING,
                Arrays.<Type>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        return executeRemoteCallSingleValueReturn(function, Boolean.class);
    }

    public RemoteCall<BigInteger> totalRefundedAmount() {
        final Function function = new Function(FUNC_TOTALREFUNDEDAMOUNT,
                Arrays.<Type>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteCall<TransactionReceipt> allocateTokensForFounder() {
        final Function function = new Function(
                FUNC_ALLOCATETOKENSFORFOUNDER,
                Arrays.<Type>asList(),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<BigInteger> founderAllocatedTime() {
        final Function function = new Function(FUNC_FOUNDERALLOCATEDTIME,
                Arrays.<Type>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteCall<BigInteger> minInvestedCap() {
        final Function function = new Function(FUNC_MININVESTEDCAP,
                Arrays.<Type>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteCall<BigInteger> allowance(String _owner, String _spender) {
        final Function function = new Function(FUNC_ALLOWANCE,
                Arrays.<Type>asList(new Address(_owner),
                        new Address(_spender)),
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteCall<TransactionReceipt> endPreSales() {
        final Function function = new Function(
                FUNC_ENDPRESALES,
                Arrays.<Type>asList(),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<BigInteger> preSalePrice() {
        final Function function = new Function(FUNC_PRESALEPRICE,
                Arrays.<Type>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteCall<BigInteger> teamAllocatedTime() {
        final Function function = new Function(FUNC_TEAMALLOCATEDTIME,
                Arrays.<Type>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteCall<BigInteger> privateSalePrice() {
        final Function function = new Function(FUNC_PRIVATESALEPRICE,
                Arrays.<Type>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteCall<Boolean> inActive() {
        final Function function = new Function(FUNC_INACTIVE,
                Arrays.<Type>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        return executeRemoteCallSingleValueReturn(function, Boolean.class);
    }

    public RemoteCall<String> adminAddress() {
        final Function function = new Function(FUNC_ADMINADDRESS,
                Arrays.<Type>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteCall<TransactionReceipt> deActivate() {
        final Function function = new Function(
                FUNC_DEACTIVATE,
                Arrays.<Type>asList(),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public static RemoteCall<GEX> deploy(Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit, String _walletAddr, String _adminAddr, String _portalAddr) {
        String encodedConstructor = FunctionEncoder.encodeConstructor(Arrays.<Type>asList(new Address(_walletAddr),
                new Address(_adminAddr),
                new Address(_portalAddr)));
        return deployRemoteCall(GEX.class, web3j, credentials, gasPrice, gasLimit, BINARY, encodedConstructor);
    }

    public static RemoteCall<GEX> deploy(Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit, String _walletAddr, String _adminAddr, String _portalAddr) {
        String encodedConstructor = FunctionEncoder.encodeConstructor(Arrays.<Type>asList(new Address(_walletAddr),
                new Address(_adminAddr),
                new Address(_portalAddr)));
        return deployRemoteCall(GEX.class, web3j, transactionManager, gasPrice, gasLimit, BINARY, encodedConstructor);
    }

    public List<ApprovalEventResponse> getApprovalEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(APPROVAL_EVENT, transactionReceipt);
        ArrayList<ApprovalEventResponse> responses = new ArrayList<ApprovalEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            ApprovalEventResponse typedResponse = new ApprovalEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.owner = (String) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.spender = (String) eventValues.getIndexedValues().get(1).getValue();
            typedResponse.value = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Observable<ApprovalEventResponse> approvalEventObservable(EthFilter filter) {
        return web3j.ethLogObservable(filter).map(new Func1<Log, ApprovalEventResponse>() {
            @Override
            public ApprovalEventResponse call(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(APPROVAL_EVENT, log);
                ApprovalEventResponse typedResponse = new ApprovalEventResponse();
                typedResponse.log = log;
                typedResponse.owner = (String) eventValues.getIndexedValues().get(0).getValue();
                typedResponse.spender = (String) eventValues.getIndexedValues().get(1).getValue();
                typedResponse.value = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
                return typedResponse;
            }
        });
    }

    public Observable<ApprovalEventResponse> approvalEventObservable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(APPROVAL_EVENT));
        return approvalEventObservable(filter);
    }

    public List<TransferEventResponse> getTransferEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(TRANSFER_EVENT, transactionReceipt);
        ArrayList<TransferEventResponse> responses = new ArrayList<TransferEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            TransferEventResponse typedResponse = new TransferEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.from = (String) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.to = (String) eventValues.getIndexedValues().get(1).getValue();
            typedResponse.value = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Observable<TransferEventResponse> transferEventObservable(EthFilter filter) {
        return web3j.ethLogObservable(filter).map(new Func1<Log, TransferEventResponse>() {
            @Override
            public TransferEventResponse call(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(TRANSFER_EVENT, log);
                TransferEventResponse typedResponse = new TransferEventResponse();
                typedResponse.log = log;
                typedResponse.from = (String) eventValues.getIndexedValues().get(0).getValue();
                typedResponse.to = (String) eventValues.getIndexedValues().get(1).getValue();
                typedResponse.value = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
                return typedResponse;
            }
        });
    }

    public Observable<TransferEventResponse> transferEventObservable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(TRANSFER_EVENT));
        return transferEventObservable(filter);
    }

    public List<ModifyWhiteListEventResponse> getModifyWhiteListEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(MODIFYWHITELIST_EVENT, transactionReceipt);
        ArrayList<ModifyWhiteListEventResponse> responses = new ArrayList<ModifyWhiteListEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            ModifyWhiteListEventResponse typedResponse = new ModifyWhiteListEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.investorAddress = (String) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.isWhiteListed = (Boolean) eventValues.getNonIndexedValues().get(1).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Observable<ModifyWhiteListEventResponse> modifyWhiteListEventObservable(EthFilter filter) {
        return web3j.ethLogObservable(filter).map(new Func1<Log, ModifyWhiteListEventResponse>() {
            @Override
            public ModifyWhiteListEventResponse call(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(MODIFYWHITELIST_EVENT, log);
                ModifyWhiteListEventResponse typedResponse = new ModifyWhiteListEventResponse();
                typedResponse.log = log;
                typedResponse.investorAddress = (String) eventValues.getNonIndexedValues().get(0).getValue();
                typedResponse.isWhiteListed = (Boolean) eventValues.getNonIndexedValues().get(1).getValue();
                return typedResponse;
            }
        });
    }

    public Observable<ModifyWhiteListEventResponse> modifyWhiteListEventObservable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(MODIFYWHITELIST_EVENT));
        return modifyWhiteListEventObservable(filter);
    }

    public List<ModifyPrivateListEventResponse> getModifyPrivateListEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(MODIFYPRIVATELIST_EVENT, transactionReceipt);
        ArrayList<ModifyPrivateListEventResponse> responses = new ArrayList<ModifyPrivateListEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            ModifyPrivateListEventResponse typedResponse = new ModifyPrivateListEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.investorAddress = (String) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.isPrivateListed = (Boolean) eventValues.getNonIndexedValues().get(1).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Observable<ModifyPrivateListEventResponse> modifyPrivateListEventObservable(EthFilter filter) {
        return web3j.ethLogObservable(filter).map(new Func1<Log, ModifyPrivateListEventResponse>() {
            @Override
            public ModifyPrivateListEventResponse call(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(MODIFYPRIVATELIST_EVENT, log);
                ModifyPrivateListEventResponse typedResponse = new ModifyPrivateListEventResponse();
                typedResponse.log = log;
                typedResponse.investorAddress = (String) eventValues.getNonIndexedValues().get(0).getValue();
                typedResponse.isPrivateListed = (Boolean) eventValues.getNonIndexedValues().get(1).getValue();
                return typedResponse;
            }
        });
    }

    public Observable<ModifyPrivateListEventResponse> modifyPrivateListEventObservable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(MODIFYPRIVATELIST_EVENT));
        return modifyPrivateListEventObservable(filter);
    }

    public List<StartPrivateSalesEventResponse> getStartPrivateSalesEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(STARTPRIVATESALES_EVENT, transactionReceipt);
        ArrayList<StartPrivateSalesEventResponse> responses = new ArrayList<StartPrivateSalesEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            StartPrivateSalesEventResponse typedResponse = new StartPrivateSalesEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.state = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Observable<StartPrivateSalesEventResponse> startPrivateSalesEventObservable(EthFilter filter) {
        return web3j.ethLogObservable(filter).map(new Func1<Log, StartPrivateSalesEventResponse>() {
            @Override
            public StartPrivateSalesEventResponse call(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(STARTPRIVATESALES_EVENT, log);
                StartPrivateSalesEventResponse typedResponse = new StartPrivateSalesEventResponse();
                typedResponse.log = log;
                typedResponse.state = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
                return typedResponse;
            }
        });
    }

    public Observable<StartPrivateSalesEventResponse> startPrivateSalesEventObservable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(STARTPRIVATESALES_EVENT));
        return startPrivateSalesEventObservable(filter);
    }

    public List<StartPresalesEventResponse> getStartPresalesEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(STARTPRESALES_EVENT, transactionReceipt);
        ArrayList<StartPresalesEventResponse> responses = new ArrayList<StartPresalesEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            StartPresalesEventResponse typedResponse = new StartPresalesEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.state = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Observable<StartPresalesEventResponse> startPresalesEventObservable(EthFilter filter) {
        return web3j.ethLogObservable(filter).map(new Func1<Log, StartPresalesEventResponse>() {
            @Override
            public StartPresalesEventResponse call(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(STARTPRESALES_EVENT, log);
                StartPresalesEventResponse typedResponse = new StartPresalesEventResponse();
                typedResponse.log = log;
                typedResponse.state = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
                return typedResponse;
            }
        });
    }

    public Observable<StartPresalesEventResponse> startPresalesEventObservable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(STARTPRESALES_EVENT));
        return startPresalesEventObservable(filter);
    }

    public List<EndPresalesEventResponse> getEndPresalesEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(ENDPRESALES_EVENT, transactionReceipt);
        ArrayList<EndPresalesEventResponse> responses = new ArrayList<EndPresalesEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            EndPresalesEventResponse typedResponse = new EndPresalesEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.state = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Observable<EndPresalesEventResponse> endPresalesEventObservable(EthFilter filter) {
        return web3j.ethLogObservable(filter).map(new Func1<Log, EndPresalesEventResponse>() {
            @Override
            public EndPresalesEventResponse call(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(ENDPRESALES_EVENT, log);
                EndPresalesEventResponse typedResponse = new EndPresalesEventResponse();
                typedResponse.log = log;
                typedResponse.state = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
                return typedResponse;
            }
        });
    }

    public Observable<EndPresalesEventResponse> endPresalesEventObservable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(ENDPRESALES_EVENT));
        return endPresalesEventObservable(filter);
    }

    public List<StartICOEventResponse> getStartICOEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(STARTICO_EVENT, transactionReceipt);
        ArrayList<StartICOEventResponse> responses = new ArrayList<StartICOEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            StartICOEventResponse typedResponse = new StartICOEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.state = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Observable<StartICOEventResponse> startICOEventObservable(EthFilter filter) {
        return web3j.ethLogObservable(filter).map(new Func1<Log, StartICOEventResponse>() {
            @Override
            public StartICOEventResponse call(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(STARTICO_EVENT, log);
                StartICOEventResponse typedResponse = new StartICOEventResponse();
                typedResponse.log = log;
                typedResponse.state = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
                return typedResponse;
            }
        });
    }

    public Observable<StartICOEventResponse> startICOEventObservable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(STARTICO_EVENT));
        return startICOEventObservable(filter);
    }

    public List<EndICOEventResponse> getEndICOEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(ENDICO_EVENT, transactionReceipt);
        ArrayList<EndICOEventResponse> responses = new ArrayList<EndICOEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            EndICOEventResponse typedResponse = new EndICOEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.state = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Observable<EndICOEventResponse> endICOEventObservable(EthFilter filter) {
        return web3j.ethLogObservable(filter).map(new Func1<Log, EndICOEventResponse>() {
            @Override
            public EndICOEventResponse call(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(ENDICO_EVENT, log);
                EndICOEventResponse typedResponse = new EndICOEventResponse();
                typedResponse.log = log;
                typedResponse.state = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
                return typedResponse;
            }
        });
    }

    public Observable<EndICOEventResponse> endICOEventObservable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(ENDICO_EVENT));
        return endICOEventObservable(filter);
    }

    public List<SetPrivateSalePriceEventResponse> getSetPrivateSalePriceEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(SETPRIVATESALEPRICE_EVENT, transactionReceipt);
        ArrayList<SetPrivateSalePriceEventResponse> responses = new ArrayList<SetPrivateSalePriceEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            SetPrivateSalePriceEventResponse typedResponse = new SetPrivateSalePriceEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.price = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Observable<SetPrivateSalePriceEventResponse> setPrivateSalePriceEventObservable(EthFilter filter) {
        return web3j.ethLogObservable(filter).map(new Func1<Log, SetPrivateSalePriceEventResponse>() {
            @Override
            public SetPrivateSalePriceEventResponse call(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(SETPRIVATESALEPRICE_EVENT, log);
                SetPrivateSalePriceEventResponse typedResponse = new SetPrivateSalePriceEventResponse();
                typedResponse.log = log;
                typedResponse.price = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
                return typedResponse;
            }
        });
    }

    public Observable<SetPrivateSalePriceEventResponse> setPrivateSalePriceEventObservable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(SETPRIVATESALEPRICE_EVENT));
        return setPrivateSalePriceEventObservable(filter);
    }

    public List<SetPreSalePriceEventResponse> getSetPreSalePriceEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(SETPRESALEPRICE_EVENT, transactionReceipt);
        ArrayList<SetPreSalePriceEventResponse> responses = new ArrayList<SetPreSalePriceEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            SetPreSalePriceEventResponse typedResponse = new SetPreSalePriceEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.price = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Observable<SetPreSalePriceEventResponse> setPreSalePriceEventObservable(EthFilter filter) {
        return web3j.ethLogObservable(filter).map(new Func1<Log, SetPreSalePriceEventResponse>() {
            @Override
            public SetPreSalePriceEventResponse call(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(SETPRESALEPRICE_EVENT, log);
                SetPreSalePriceEventResponse typedResponse = new SetPreSalePriceEventResponse();
                typedResponse.log = log;
                typedResponse.price = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
                return typedResponse;
            }
        });
    }

    public Observable<SetPreSalePriceEventResponse> setPreSalePriceEventObservable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(SETPRESALEPRICE_EVENT));
        return setPreSalePriceEventObservable(filter);
    }

    public List<SetICOPriceEventResponse> getSetICOPriceEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(SETICOPRICE_EVENT, transactionReceipt);
        ArrayList<SetICOPriceEventResponse> responses = new ArrayList<SetICOPriceEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            SetICOPriceEventResponse typedResponse = new SetICOPriceEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.price = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Observable<SetICOPriceEventResponse> setICOPriceEventObservable(EthFilter filter) {
        return web3j.ethLogObservable(filter).map(new Func1<Log, SetICOPriceEventResponse>() {
            @Override
            public SetICOPriceEventResponse call(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(SETICOPRICE_EVENT, log);
                SetICOPriceEventResponse typedResponse = new SetICOPriceEventResponse();
                typedResponse.log = log;
                typedResponse.price = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
                return typedResponse;
            }
        });
    }

    public Observable<SetICOPriceEventResponse> setICOPriceEventObservable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(SETICOPRICE_EVENT));
        return setICOPriceEventObservable(filter);
    }

    public List<IssueTokensEventResponse> getIssueTokensEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(ISSUETOKENS_EVENT, transactionReceipt);
        ArrayList<IssueTokensEventResponse> responses = new ArrayList<IssueTokensEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            IssueTokensEventResponse typedResponse = new IssueTokensEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.investorAddress = (String) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.amount = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
            typedResponse.tokenAmount = (BigInteger) eventValues.getNonIndexedValues().get(2).getValue();
            typedResponse.state = (BigInteger) eventValues.getNonIndexedValues().get(3).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Observable<IssueTokensEventResponse> issueTokensEventObservable(EthFilter filter) {
        return web3j.ethLogObservable(filter).map(new Func1<Log, IssueTokensEventResponse>() {
            @Override
            public IssueTokensEventResponse call(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(ISSUETOKENS_EVENT, log);
                IssueTokensEventResponse typedResponse = new IssueTokensEventResponse();
                typedResponse.log = log;
                typedResponse.investorAddress = (String) eventValues.getNonIndexedValues().get(0).getValue();
                typedResponse.amount = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
                typedResponse.tokenAmount = (BigInteger) eventValues.getNonIndexedValues().get(2).getValue();
                typedResponse.state = (BigInteger) eventValues.getNonIndexedValues().get(3).getValue();
                return typedResponse;
            }
        });
    }

    public Observable<IssueTokensEventResponse> issueTokensEventObservable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(ISSUETOKENS_EVENT));
        return issueTokensEventObservable(filter);
    }

    public List<RevokeTokensEventResponse> getRevokeTokensEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(REVOKETOKENS_EVENT, transactionReceipt);
        ArrayList<RevokeTokensEventResponse> responses = new ArrayList<RevokeTokensEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            RevokeTokensEventResponse typedResponse = new RevokeTokensEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.investorAddress = (String) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.amount = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
            typedResponse.tokenAmount = (BigInteger) eventValues.getNonIndexedValues().get(2).getValue();
            typedResponse.txFee = (BigInteger) eventValues.getNonIndexedValues().get(3).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Observable<RevokeTokensEventResponse> revokeTokensEventObservable(EthFilter filter) {
        return web3j.ethLogObservable(filter).map(new Func1<Log, RevokeTokensEventResponse>() {
            @Override
            public RevokeTokensEventResponse call(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(REVOKETOKENS_EVENT, log);
                RevokeTokensEventResponse typedResponse = new RevokeTokensEventResponse();
                typedResponse.log = log;
                typedResponse.investorAddress = (String) eventValues.getNonIndexedValues().get(0).getValue();
                typedResponse.amount = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
                typedResponse.tokenAmount = (BigInteger) eventValues.getNonIndexedValues().get(2).getValue();
                typedResponse.txFee = (BigInteger) eventValues.getNonIndexedValues().get(3).getValue();
                return typedResponse;
            }
        });
    }

    public Observable<RevokeTokensEventResponse> revokeTokensEventObservable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(REVOKETOKENS_EVENT));
        return revokeTokensEventObservable(filter);
    }

    public List<AllocateTokensForFounderEventResponse> getAllocateTokensForFounderEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(ALLOCATETOKENSFORFOUNDER_EVENT, transactionReceipt);
        ArrayList<AllocateTokensForFounderEventResponse> responses = new ArrayList<AllocateTokensForFounderEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            AllocateTokensForFounderEventResponse typedResponse = new AllocateTokensForFounderEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.founderAddress = (String) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.founderAllocatedTime = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
            typedResponse.tokenAmount = (BigInteger) eventValues.getNonIndexedValues().get(2).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Observable<AllocateTokensForFounderEventResponse> allocateTokensForFounderEventObservable(EthFilter filter) {
        return web3j.ethLogObservable(filter).map(new Func1<Log, AllocateTokensForFounderEventResponse>() {
            @Override
            public AllocateTokensForFounderEventResponse call(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(ALLOCATETOKENSFORFOUNDER_EVENT, log);
                AllocateTokensForFounderEventResponse typedResponse = new AllocateTokensForFounderEventResponse();
                typedResponse.log = log;
                typedResponse.founderAddress = (String) eventValues.getNonIndexedValues().get(0).getValue();
                typedResponse.founderAllocatedTime = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
                typedResponse.tokenAmount = (BigInteger) eventValues.getNonIndexedValues().get(2).getValue();
                return typedResponse;
            }
        });
    }

    public Observable<AllocateTokensForFounderEventResponse> allocateTokensForFounderEventObservable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(ALLOCATETOKENSFORFOUNDER_EVENT));
        return allocateTokensForFounderEventObservable(filter);
    }

    public List<AllocateTokensForTeamEventResponse> getAllocateTokensForTeamEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(ALLOCATETOKENSFORTEAM_EVENT, transactionReceipt);
        ArrayList<AllocateTokensForTeamEventResponse> responses = new ArrayList<AllocateTokensForTeamEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            AllocateTokensForTeamEventResponse typedResponse = new AllocateTokensForTeamEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.teamAddress = (String) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.teamAllocatedTime = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
            typedResponse.tokenAmount = (BigInteger) eventValues.getNonIndexedValues().get(2).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Observable<AllocateTokensForTeamEventResponse> allocateTokensForTeamEventObservable(EthFilter filter) {
        return web3j.ethLogObservable(filter).map(new Func1<Log, AllocateTokensForTeamEventResponse>() {
            @Override
            public AllocateTokensForTeamEventResponse call(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(ALLOCATETOKENSFORTEAM_EVENT, log);
                AllocateTokensForTeamEventResponse typedResponse = new AllocateTokensForTeamEventResponse();
                typedResponse.log = log;
                typedResponse.teamAddress = (String) eventValues.getNonIndexedValues().get(0).getValue();
                typedResponse.teamAllocatedTime = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
                typedResponse.tokenAmount = (BigInteger) eventValues.getNonIndexedValues().get(2).getValue();
                return typedResponse;
            }
        });
    }

    public Observable<AllocateTokensForTeamEventResponse> allocateTokensForTeamEventObservable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(ALLOCATETOKENSFORTEAM_EVENT));
        return allocateTokensForTeamEventObservable(filter);
    }

    public List<AllocateReservedTokensEventResponse> getAllocateReservedTokensEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(ALLOCATERESERVEDTOKENS_EVENT, transactionReceipt);
        ArrayList<AllocateReservedTokensEventResponse> responses = new ArrayList<AllocateReservedTokensEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            AllocateReservedTokensEventResponse typedResponse = new AllocateReservedTokensEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.reservedAddress = (String) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.tokenAmount = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Observable<AllocateReservedTokensEventResponse> allocateReservedTokensEventObservable(EthFilter filter) {
        return web3j.ethLogObservable(filter).map(new Func1<Log, AllocateReservedTokensEventResponse>() {
            @Override
            public AllocateReservedTokensEventResponse call(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(ALLOCATERESERVEDTOKENS_EVENT, log);
                AllocateReservedTokensEventResponse typedResponse = new AllocateReservedTokensEventResponse();
                typedResponse.log = log;
                typedResponse.reservedAddress = (String) eventValues.getNonIndexedValues().get(0).getValue();
                typedResponse.tokenAmount = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
                return typedResponse;
            }
        });
    }

    public Observable<AllocateReservedTokensEventResponse> allocateReservedTokensEventObservable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(ALLOCATERESERVEDTOKENS_EVENT));
        return allocateReservedTokensEventObservable(filter);
    }

    public List<RefundEventResponse> getRefundEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(REFUND_EVENT, transactionReceipt);
        ArrayList<RefundEventResponse> responses = new ArrayList<RefundEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            RefundEventResponse typedResponse = new RefundEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.investorAddress = (String) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.etherRefundedAmount = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
            typedResponse.tokensRevokedAmount = (BigInteger) eventValues.getNonIndexedValues().get(2).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Observable<RefundEventResponse> refundEventObservable(EthFilter filter) {
        return web3j.ethLogObservable(filter).map(new Func1<Log, RefundEventResponse>() {
            @Override
            public RefundEventResponse call(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(REFUND_EVENT, log);
                RefundEventResponse typedResponse = new RefundEventResponse();
                typedResponse.log = log;
                typedResponse.investorAddress = (String) eventValues.getNonIndexedValues().get(0).getValue();
                typedResponse.etherRefundedAmount = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
                typedResponse.tokensRevokedAmount = (BigInteger) eventValues.getNonIndexedValues().get(2).getValue();
                return typedResponse;
            }
        });
    }

    public Observable<RefundEventResponse> refundEventObservable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(REFUND_EVENT));
        return refundEventObservable(filter);
    }

    public static GEX load(String contractAddress, Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        return new GEX(contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    public static GEX load(String contractAddress, Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        return new GEX(contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    public static class ApprovalEventResponse {
        public Log log;

        public String owner;

        public String spender;

        public BigInteger value;
    }

    public static class TransferEventResponse {
        public Log log;

        public String from;

        public String to;

        public BigInteger value;
    }

    public static class ModifyWhiteListEventResponse {
        public Log log;

        public String investorAddress;

        public Boolean isWhiteListed;
    }

    public static class ModifyPrivateListEventResponse {
        public Log log;

        public String investorAddress;

        public Boolean isPrivateListed;
    }

    public static class StartPrivateSalesEventResponse {
        public Log log;

        public BigInteger state;
    }

    public static class StartPresalesEventResponse {
        public Log log;

        public BigInteger state;
    }

    public static class EndPresalesEventResponse {
        public Log log;

        public BigInteger state;
    }

    public static class StartICOEventResponse {
        public Log log;

        public BigInteger state;
    }

    public static class EndICOEventResponse {
        public Log log;

        public BigInteger state;
    }

    public static class SetPrivateSalePriceEventResponse {
        public Log log;

        public BigInteger price;
    }

    public static class SetPreSalePriceEventResponse {
        public Log log;

        public BigInteger price;
    }

    public static class SetICOPriceEventResponse {
        public Log log;

        public BigInteger price;
    }

    public static class IssueTokensEventResponse {
        public Log log;

        public String investorAddress;

        public BigInteger amount;

        public BigInteger tokenAmount;

        public BigInteger state;
    }

    public static class RevokeTokensEventResponse {
        public Log log;

        public String investorAddress;

        public BigInteger amount;

        public BigInteger tokenAmount;

        public BigInteger txFee;
    }

    public static class AllocateTokensForFounderEventResponse {
        public Log log;

        public String founderAddress;

        public BigInteger founderAllocatedTime;

        public BigInteger tokenAmount;
    }

    public static class AllocateTokensForTeamEventResponse {
        public Log log;

        public String teamAddress;

        public BigInteger teamAllocatedTime;

        public BigInteger tokenAmount;
    }

    public static class AllocateReservedTokensEventResponse {
        public Log log;

        public String reservedAddress;

        public BigInteger tokenAmount;
    }

    public static class RefundEventResponse {
        public Log log;

        public String investorAddress;

        public BigInteger etherRefundedAmount;

        public BigInteger tokensRevokedAmount;
    }
}